// MainActivity.java
package {{package_name}};

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    private RecyclerView rvNotes;
    private Button btnAddNote;
    private NoteAdapter adapter;
    private DatabaseHelper dbHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // Initialize views
        rvNotes = findViewById(R.id.rvNotes);
        btnAddNote = findViewById(R.id.btnAddNote);
        
        // Initialize database helper
        dbHelper = new DatabaseHelper(this);
        
        // Set up RecyclerView
        rvNotes.setLayoutManager(new LinearLayoutManager(this));
        
        // Load notes from database
        loadNotes();
        
        // Set up add note button
        btnAddNote.setOnClickListener(v -> showAddNoteDialog());
    }
    
    private void loadNotes() {
        List<Note> notes = dbHelper.getAllNotes();
        adapter = new NoteAdapter(notes);
        rvNotes.setAdapter(adapter);
    }
    
    private void showAddNoteDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_note, null);
        
        EditText etTitle = dialogView.findViewById(R.id.etTitle);
        EditText etContent = dialogView.findViewById(R.id.etContent);
        
        builder.setTitle("Add New Note")
                .setView(dialogView)
                .setPositiveButton("Save", (dialog, which) -> {
                    String title = etTitle.getText().toString();
                    String content = etContent.getText().toString();
                    
                    if (!title.isEmpty() && !content.isEmpty()) {
                        // Save note to database
                        Note note = new Note();
                        note.setTitle(title);
                        note.setContent(content);
                        
                        long id = dbHelper.addNote(note);
                        if (id > 0) {
                            // Note added successfully
                            note.setId(id);
                            
                            // Update UI
                            if (adapter != null) {
                                adapter.addNote(note);
                                rvNotes.scrollToPosition(0);
                            }
                            
                            Toast.makeText(MainActivity.this, "Note added", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(MainActivity.this, "Failed to add note", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(MainActivity.this, "Title and content cannot be empty", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("Cancel", null)
                .create()
                .show();
    }
    
    class NoteAdapter extends RecyclerView.Adapter<NoteAdapter.NoteViewHolder> {
        
        private List<Note> notes;
        
        NoteAdapter(List<Note> notes) {
            this.notes = notes;
        }
        
        void addNote(Note note) {
            // Add to beginning of list
            notes.add(0, note);
            notifyItemInserted(0);
        }
        
        void updateNote(Note note) {
            for (int i = 0; i < notes.size(); i++) {
                if (notes.get(i).getId() == note.getId()) {
                    notes.set(i, note);
                    notifyItemChanged(i);
                    break;
                }
            }
        }
        
        void removeNote(long noteId) {
            for (int i = 0; i < notes.size(); i++) {
                if (notes.get(i).getId() == noteId) {
                    notes.remove(i);
                    notifyItemRemoved(i);
                    break;
                }
            }
        }
        
        @NonNull
        @Override
        public NoteViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.note_item, parent, false);
            return new NoteViewHolder(view);
        }
        
        @Override
        public void onBindViewHolder(@NonNull NoteViewHolder holder, int position) {
            Note note = notes.get(position);
            
            holder.tvTitle.setText(note.getTitle());
            holder.tvContent.setText(note.getContent());
            
            // Set up item click for editing
            holder.itemView.setOnClickListener(v -> showEditNoteDialog(note));
            
            // Set up long press for deletion
            holder.itemView.setOnLongClickListener(v -> {
                showDeleteNoteDialog(note);
                return true;
            });
        }
        
        @Override
        public int getItemCount() {
            return notes.size();
        }
        
        class NoteViewHolder extends RecyclerView.ViewHolder {
            TextView tvTitle;
            TextView tvContent;
            
            NoteViewHolder(@NonNull View itemView) {
                super(itemView);
                tvTitle = itemView.findViewById(R.id.tvTitle);
                tvContent = itemView.findViewById(R.id.tvContent);
            }
        }
    }
    
    private void showEditNoteDialog(final Note note) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        View dialogView = getLayoutInflater().inflate(R.layout.dialog_add_note, null);
        
        EditText etTitle = dialogView.findViewById(R.id.etTitle);
        EditText etContent = dialogView.findViewById(R.id.etContent);
        
        // Pre-fill with note data
        etTitle.setText(note.getTitle());
        etContent.setText(note.getContent());
        
        builder.setTitle("Edit Note")
                .setView(dialogView)
                .setPositiveButton("Save", (dialog, which) -> {
                    String title = etTitle.getText().toString();
                    String content = etContent.getText().toString();
                    
                    if (!title.isEmpty() && !content.isEmpty()) {
                        // Update note
                        note.setTitle(title);
                        note.setContent(content);
                        
                        int rows = dbHelper.updateNote(note);
                        if (rows > 0) {
                            // Note updated successfully
                            
                            // Update UI
                            if (adapter != null) {
                                adapter.updateNote(note);
                            }
                            
                            Toast.makeText(MainActivity.this, "Note updated", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(MainActivity.this, "Failed to update note", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(MainActivity.this, "Title and content cannot be empty", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("Cancel", null)
                .create()
                .show();
    }
    
    private void showDeleteNoteDialog(final Note note) {
        new AlertDialog.Builder(this)
                .setTitle("Delete Note")
                .setMessage("Are you sure you want to delete this note?")
                .setPositiveButton("Delete", (dialog, which) -> {
                    int rows = dbHelper.deleteNote(note.getId());
                    if (rows > 0) {
                        // Note deleted successfully
                        
                        // Update UI
                        if (adapter != null) {
                            adapter.removeNote(note.getId());
                        }
                        
                        Toast.makeText(MainActivity.this, "Note deleted", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(MainActivity.this, "Failed to delete note", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("Cancel", null)
                .create()
                .show();
    }
}

// Note.java
package {{package_name}};

public class Note {
    private long id;
    private String title;
    private String content;
    
    public Note() {
    }
    
    public Note(long id, String title, String content) {
        this.id = id;
        this.title = title;
        this.content = content;
    }
    
    public long getId() {
        return id;
    }
    
    public void setId(long id) {
        this.id = id;
    }
    
    public String getTitle() {
        return title;
    }
    
    public void setTitle(String title) {
        this.title = title;
    }
    
    public String getContent() {
        return content;
    }
    
    public void setContent(String content) {
        this.content = content;
    }
}

// DatabaseHelper.java
package {{package_name}};

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.List;

public class DatabaseHelper extends SQLiteOpenHelper {
    
    private static final String DATABASE_NAME = "notes_db";
    private static final int DATABASE_VERSION = 1;
    
    private static final String TABLE_NOTES = "notes";
    private static final String COLUMN_ID = "id";
    private static final String COLUMN_TITLE = "title";
    private static final String COLUMN_CONTENT = "content";
    
    // Create table SQL query
    private static final String CREATE_TABLE_NOTES = 
            "CREATE TABLE " + TABLE_NOTES + "("
            + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + COLUMN_TITLE + " TEXT,"
            + COLUMN_CONTENT + " TEXT"
            + ")";
    
    public DatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
    
    @Override
    public void onCreate(SQLiteDatabase db) {
        // Create notes table
        db.execSQL(CREATE_TABLE_NOTES);
    }
    
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop older table if existed
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOTES);
        
        // Create tables again
        onCreate(db);
    }
    
    /**
     * Insert a new note in the database
     */
    public long addNote(Note note) {
        SQLiteDatabase db = this.getWritableDatabase();
        
        ContentValues values = new ContentValues();
        values.put(COLUMN_TITLE, note.getTitle());
        values.put(COLUMN_CONTENT, note.getContent());
        
        // Insert row
        long id = db.insert(TABLE_NOTES, null, values);
        
        // Close db connection
        db.close();
        
        // Return newly inserted row id
        return id;
    }
    
    /**
     * Get a note by id
     */
    public Note getNote(long id) {
        SQLiteDatabase db = this.getReadableDatabase();
        
        Cursor cursor = db.query(
                TABLE_NOTES,
                new String[]{COLUMN_ID, COLUMN_TITLE, COLUMN_CONTENT},
                COLUMN_ID + "=?",
                new String[]{String.valueOf(id)},
                null, null, null, null
        );
        
        if (cursor != null)
            cursor.moveToFirst();
        
        // Prepare note object
        Note note = new Note(
                cursor.getLong(cursor.getColumnIndex(COLUMN_ID)),
                cursor.getString(cursor.getColumnIndex(COLUMN_TITLE)),
                cursor.getString(cursor.getColumnIndex(COLUMN_CONTENT))
        );
        
        // Close the cursor
        cursor.close();
        
        // Return note
        return note;
    }
    
    /**
     * Get all notes
     */
    public List<Note> getAllNotes() {
        List<Note> notes = new ArrayList<>();
        
        // Select All Query
        String selectQuery = "SELECT * FROM " + TABLE_NOTES + " ORDER BY " + COLUMN_ID + " DESC";
        
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        
        // Loop through all rows and add to list
        if (cursor.moveToFirst()) {
            do {
                Note note = new Note();
                note.setId(cursor.getLong(cursor.getColumnIndex(COLUMN_ID)));
                note.setTitle(cursor.getString(cursor.getColumnIndex(COLUMN_TITLE)));
                note.setContent(cursor.getString(cursor.getColumnIndex(COLUMN_CONTENT)));
                
                notes.add(note);
            } while (cursor.moveToNext());
        }
        
        // Close cursor
        cursor.close();
        
        // Return notes list
        return notes;
    }
    
    /**
     * Update a note
     */
    public int updateNote(Note note) {
        SQLiteDatabase db = this.getWritableDatabase();
        
        ContentValues values = new ContentValues();
        values.put(COLUMN_TITLE, note.getTitle());
        values.put(COLUMN_CONTENT, note.getContent());
        
        // Update row
        return db.update(
                TABLE_NOTES,
                values,
                COLUMN_ID + "=?",
                new String[]{String.valueOf(note.getId())}
        );
    }
    
    /**
     * Delete a note
     */
    public int deleteNote(long id) {
        SQLiteDatabase db = this.getWritableDatabase();
        
        // Delete row
        return db.delete(
                TABLE_NOTES,
                COLUMN_ID + "=?",
                new String[]{String.valueOf(id)}
        );
    }
}

// activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rvNotes"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_marginStart="8dp"
        android:layout_marginTop="8dp"
        android:layout_marginEnd="8dp"
        android:layout_marginBottom="8dp"
        app:layout_constraintBottom_toTopOf="@+id/btnAddNote"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <Button
        android:id="@+id/btnAddNote"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp"
        android:layout_marginBottom="16dp"
        android:text="Add Note"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

// dialog_add_note.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/etTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Title"
        android:inputType="text"
        android:maxLines="1" />

    <EditText
        android:id="@+id/etContent"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:gravity="top"
        android:hint="Content"
        android:inputType="textMultiLine"
        android:lines="5" />

</LinearLayout>

// note_item.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="4dp"
    app:cardCornerRadius="4dp"
    app:cardElevation="2dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="12dp">

        <TextView
            android:id="@+id/tvTitle"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textSize="18sp"
            android:textStyle="bold"
            tools:text="Note Title" />

        <TextView
            android:id="@+id/tvContent"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:ellipsize="end"
            android:maxLines="3"
            tools:text="Note content goes here. This can be a longer text that displays the beginning of the note." />

    </LinearLayout>

</androidx.cardview.widget.CardView>

// AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="{{package_name}}">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="{{app_name}}"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

// strings.xml
<resources>
    <string name="app_name">{{app_name}}</string>
</resources>

// colors.xml
<resources>
    <color name="colorPrimary">#6200EE</color>
    <color name="colorPrimaryDark">#3700B3</color>
    <color name="colorAccent">#03DAC5</color>
</resources>